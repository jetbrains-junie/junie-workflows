
name: junie

on:
  workflow_call:
    inputs:
      workflow_params:
        description: "JSON string containing all workflow parameters"
        type: string
        required: true
      runs-on:
        description: "Which runner use to run junie"
        type: string
        default: "ubuntu-latest"
        required: false
      junie_ide:
        description: "IDE which will be used to handle tasks. Current available options are IdeaUltimate or PhpStorm"
        type: string
        default: "IdeaUltimate"
        required: false
    secrets:
      JUNIE_SECRETS_JSON:
        description: "JSON string containing secrets for the Junie agent"
        required: false

jobs:
  run-junie:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write
    steps:
      - name: Extract workflow params
        id: workflow-params
        uses: actions/github-script@v7
        env:
          INPUT_PARAMS: ${{ inputs.workflow_params }}
          JUNIE_SECRETS_JSON: ${{ secrets.JUNIE_SECRETS_JSON }}
        with:
          script: |
            const params = JSON.parse(core.getInput('params'));
            
            if (process.env.JUNIE_SECRETS_JSON) {
              const secrets = JSON.parse(process.env.JUNIE_SECRETS_JSON);
              Object.values(secrets).forEach(value => {
                console.log(`::add-mask::${value}`);
              });
            }

            // Add workflow start time in milliseconds
            const workflowStartTime = Date.now();
            console.log('Workflow start time (ms):', workflowStartTime);

            const finalParams = { 
              junie_ide_version: '251',
              junie_version: '248.1',
              workflow_start_time: workflowStartTime,  
              ...params,                           
            };
            
            Object.keys(finalParams).forEach((key) => {
                core.setOutput(key, finalParams[key]);
            });

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.workflow-params.outputs.checkout_ref }}

      - name: Init git configuration
        run: |
          git config --global user.name 'junie-eap[bot]'
          git config --global user.email 'junie-eap[bot]@users.noreply.github.com'

      - name: Make all scripts in .devcontainer executable
        if: always() && (hashFiles('.devcontainer/devcontainer.json') != '')
        run: find .devcontainer -type f -name "*.sh" -exec chmod +x {} \;

      - name: Prepare container and run Junie
        id: run_junie_in_container
        if: always() && (hashFiles('.devcontainer/devcontainer.json') != '')
        uses: devcontainers/ci@v0.3
        timeout-minutes: 50
        env:
          EJ_TASK: ${{ steps.workflow-params.outputs.task }}
          EJ_AUTH_GITHUB_TOKEN: ${{ steps.workflow-params.outputs.junie_runner_token  }}
          EJ_TASK_TEXT: ${{ steps.workflow-params.outputs.issue_body && format('### {0}\n{1}', steps.workflow-params.outputs.issue_title, steps.workflow-params.outputs.issue_body) || '' }}
          MULTI_RUNS: true
          MATTERHORN_DEBUG_LOG: true
          JUNIE_SECRETS_JSON: ${{ secrets.JUNIE_SECRETS_JSON }}
        with:
          push: never
          env: |
            EJ_TASK
            EJ_AUTH_GITHUB_TOKEN  
            EJ_AUTH_INGRAZZIO_GITHUB_TOKEN
            EJ_TASK_TEXT
            MULTI_RUNS
            MATTERHORN_DEBUG_LOG
            JUNIE_SECRETS_JSON
          runCmd: |
            set -e
            mkdir /tmp/junie-work
            JUNIE_WORK_TEMP="/tmp/junie-work"
            echo "Junie working directory: $JUNIE_WORK_TEMP"
            
            command_exists() {
              command -v "$1" >/dev/null 2>&1
            }
            
            echo "Installing IDEA dependencies"
            
            if [[ "$OSTYPE" == linux* ]]; then
              if command_exists "apt-get"; then
                sudo apt-get -qq update
                sudo apt-get -qq install -y libfreetype6 fonts-liberation fontconfig
              elif command_exists "pacman"; then
                sudo pacman -Sy --noconfirm freetype2 ttf-liberation fontconfig
              else
                echo "Error: No supported package manager found (apt-get or pacman)"
              fi
            fi

            if [ -n "$JUNIE_SECRETS_JSON" ]; then
              echo "$JUNIE_SECRETS_JSON" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' | while IFS= read -r line; do
                if [ -n "$line" ]; then
                  export "$line"
                fi
              done
              echo "Loaded environment variables from JUNIE_SECRETS_JSON"
            fi
  
            export EJ_FOLDER_WORK=$JUNIE_WORK_TEMP
            export EJ_FOLDER_IDE_CACHES=$JUNIE_WORK_TEMP
            export EJ_FOLDER_IDE_CONFIG=$JUNIE_WORK_TEMP
            export EJ_FOLDER_AGENT_CACHES=$JUNIE_WORK_TEMP
            export EJ_PROJECT=$(realpath ".")

            decoded_payload=$(echo "${{ steps.workflow-params.outputs.ingrazzio_token_jwt }}" | cut -d'.' -f2 | base64 -d)
            export EJ_AUTH_INGRAZZIO_GITHUB_TOKEN=$(echo "$decoded_payload" | sed -n 's/.*"sub"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')

            cd $JUNIE_WORK_TEMP
            echo "Downloading ej-runner"
            wget -nv "https://github.com/jetbrains-junie/artifacts/releases/download/${{ steps.workflow-params.outputs.junie_version }}/junie.sh" -O junie.sh

            echo "Running ej-runner"
            
            # Calculate time limit: 60 minutes minus time passed since workflow start
            current_time=$(date +%s%N | cut -b1-13)  # Get current time in milliseconds
            time_passed=$((current_time - ${{ steps.workflow-params.outputs.workflow_start_time }}))
            export JUNIE_TIME_LIMIT=$((3300000 - time_passed))  # 3300000 = 55 minutes in milliseconds
            echo "Current time (ms): $current_time"
            echo "Time passed since workflow start (ms): $time_passed"
            echo "Time limit set to (ms): $JUNIE_TIME_LIMIT"
            
            export EJ_IDE_NAME="${{ inputs.junie_ide }}"
            export JUNIE_VERSION="${{ steps.workflow-params.outputs.junie_version }}"
            export JUNIE_IDE_VERSION="${{ steps.workflow-params.outputs.junie_ide_version }}"
            chmod +x ./junie.sh
            /bin/sh ./junie.sh
      - name: Check if junie run failed
        if: failure() && (hashFiles('.devcontainer/devcontainer.json') != '')
        run: |
          mkdir -p .junie-upload/.matterhorn/out/
          echo "${{ steps.run_junie_in_container.outputs.runCmdOutput }}" >> .junie-upload/.matterhorn/out/containerError.md
      - name: Extracting .idea and ej-logs from container
        if: always() && (hashFiles('.devcontainer/devcontainer.json') != '')
        run: |
          CONTAINER_ID=$(docker container ls --filter "label=devcontainer.config_file" --quiet | head -n 1)
          echo "CONTAINER=$CONTAINER_ID"

          mkdir -p .junie-upload

          docker cp "$CONTAINER_ID":"/tmp/junie-work/.matterhorn" .junie-upload/.matterhorn || echo "No .matterhorn"
          docker cp "$CONTAINER_ID":"/tmp/junie-work/idea-logs/log/idea.log" .junie-upload/.matterhorn/idea.log || echo "No idea-logs"          
          sudo chown -R runner:runner ${{ github.workspace }} || true

          # rename containerError.md to executionError.md if main.log exists (aka execution took place)
          LOG_FILE=".junie-upload/.matterhorn/.matterhorn/out/main.log"
          CONTAINER_ERROR_FILE=".junie-upload/.matterhorn/out/containerError.md"
          EXECUTION_ERROR_FILE=".junie-upload/.matterhorn/out/executionError.md"
          
          # Check if the log file exists
          if [ -f "$LOG_FILE" ]; then
            # Check if the error file exists before attempting to rename
            if [ -f "$CONTAINER_ERROR_FILE" ]; then
              # Rename the error file
              mv "$CONTAINER_ERROR_FILE" "$EXECUTION_ERROR_FILE"
              echo "Renamed $CONTAINER_ERROR_FILE to $EXECUTION_ERROR_FILE"
            fi
          else
            echo "$LOG_FILE doesn't exist, assuming container error"
          fi

      - name: Run Junie without container
        if: always() && (hashFiles('.devcontainer/devcontainer.json') == '')
        timeout-minutes: 50
        env:
          EJ_TASK: ${{ steps.workflow-params.outputs.task }}
          EJ_AUTH_GITHUB_TOKEN: ${{ steps.workflow-params.outputs.junie_runner_token  }}
          EJ_TASK_TEXT: ${{ steps.workflow-params.outputs.issue_body && format('### {0}\n{1}', steps.workflow-params.outputs.issue_title, steps.workflow-params.outputs.issue_body) || '' }}
          MULTI_RUNS: true
          MATTERHORN_DEBUG_LOG: true
          JUNIE_SECRETS_JSON: ${{ secrets.JUNIE_SECRETS_JSON }}
        run: |
          mkdir /tmp/junie-work
          JUNIE_WORK_TEMP="/tmp/junie-work"
          echo "Junie working directory: $JUNIE_WORK_TEMP"
 
          export EJ_FOLDER_WORK=$JUNIE_WORK_TEMP
          export EJ_FOLDER_IDE_CACHES=$JUNIE_WORK_TEMP
          export EJ_FOLDER_IDE_CONFIG=$JUNIE_WORK_TEMP
          export EJ_FOLDER_AGENT_CACHES=$JUNIE_WORK_TEMP
          export EJ_PROJECT=$(realpath ".")

          decoded_payload=$(echo "${{ steps.workflow-params.outputs.ingrazzio_token_jwt }}" | cut -d'.' -f2 | base64 -d)
          export EJ_AUTH_INGRAZZIO_GITHUB_TOKEN=$(echo "$decoded_payload" | sed -n 's/.*"sub"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p')

          cd $JUNIE_WORK_TEMP
          
          echo "Downloading ej-runner"
          sudo wget -nv "https://github.com/jetbrains-junie/artifacts/releases/download/${{  steps.workflow-params.outputs.junie_version }}/junie.sh" -O junie.sh

          echo "Running ej-runner"
          # Calculate time limit: 60 minutes minus time passed since workflow start
          current_time=$(date +%s%N | cut -b1-13)  # Get current time in milliseconds
          time_passed=$((current_time - ${{ steps.workflow-params.outputs.workflow_start_time }}))
          export JUNIE_TIME_LIMIT=$((3300000 - time_passed))  # 3300000 = 55 minutes in milliseconds
          echo "Current time (ms): $current_time"
          echo "Time passed since workflow start (ms): $time_passed"
          echo "Time limit set to (ms): $JUNIE_TIME_LIMIT"

          export EJ_IDE_NAME="${{ inputs.junie_ide }}"
          export JUNIE_VERSION="${{  steps.workflow-params.outputs.junie_version }}"
          export JUNIE_IDE_VERSION="${{ steps.workflow-params.outputs.junie_ide_version }}"

          sudo chmod +x ./junie.sh
          /bin/sh ./junie.sh

      - name: Extracting .idea and ej-logs for non-container run
        if: always() && (hashFiles('.devcontainer/devcontainer.json') == '')
        run: |
          echo "Copying logs to target dir..."
          sudo chown -R runner:runner /tmp/junie-work
          sudo chown -R runner:runner ${{ github.workspace }} || true
          mkdir .junie-upload
          cp -r /tmp/junie-work/.matterhorn .junie-upload/.matterhorn
          cp -r /tmp/junie-work/idea-logs/log/idea.log .junie-upload/.matterhorn/idea.log

      - name: Save junie result summary
        id: junie_summary
        continue-on-error: true
        run: |
          summary=$(jq -r '.content.output | select(. != null)' .junie-upload/.matterhorn/issue_md.*)
          echo "summary is $summary"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          name=$(jq -r '.content.title | select(. != null)' .junie-upload/.matterhorn/issue_md.*)
          echo "name is $name"
          name=${name:-"Improvement from Junie"}
          echo "name=$name" >> "$GITHUB_OUTPUT" 

      - name: Archive output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            .junie-upload/.matterhorn/out/
            !.junie-upload/.matterhorn/out/attachments/**/*
          retention-days: 7

      - name: Archive attachments
        if: always()
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: attachments
          path: .junie-upload/.matterhorn/out/attachments
          retention-days: 7

      - name: Archive matterhorn directory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matterhorn-logs
          path: .junie-upload/.matterhorn
          include-hidden-files: 'true'
          retention-days: 3

      - name: Restore or remove .idea directory
        run: |
          sudo rm -rf .junie-upload
          sudo rm -rf .output.txt
          sudo rm -rf solution.patch

          if git ls-tree -d HEAD .idea | grep "\.idea" >/dev/null 2>&1; then
            echo "Restoring tracked '.idea' directory"
            git checkout -- .idea
            git clean -f -d .idea            
          else
            echo "Removing untracked '.idea' directory"
            sudo rm -rf .idea
          fi

      # Uncomment when we support auto resolve conflicts
      # - name: Reset git changes from junie
      #   if: always()
      #   run: |
      #      git reset origin/${{ steps.workflow-params.outputs.checkout_ref }}

      - name: Fetch PR creation token
        uses: actions/github-script@v7
        id: pull-request-token
        env:
          INPUT_PARAMS: ${{ inputs.workflow_params }}
        with:
          script: |
            const params = JSON.parse(core.getInput('params'));
            const { run_id_token, api_base_url } = params;

            if (!run_id_token || !api_base_url)  {
              // TODO: remove after backend deployment
              core.setOutput("pull_requests_creation_token", params.pull_requests_creation_token);
              return;
            };
            const response = await fetch(`${api_base_url}/token/exchange`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({
                  runIdToken: run_id_token,
                  tokens: ["PULL_REQUEST_CREATION"]
                })
            });

            if (!response.ok) {
              throw new Error(`HTTP error! status: ${response.status}`);
            }

            const { PULL_REQUEST_CREATION } = await response.json();

            core.setOutput("pull_requests_creation_token", PULL_REQUEST_CREATION);


      - name: Make Pull Request for the changes
        if: steps.workflow-params.outputs.target_ref != steps.workflow-params.outputs.checkout_ref
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.pull-request-token.outputs.pull_requests_creation_token }}
          commit-message: "${{ steps.junie_summary.outputs.name }} \n ${{ steps.junie_summary.outputs.summary }}"
          title: "[Junie]: ${{ steps.junie_summary.outputs.name }}"
          body: |
            ## 📌 Hey! This PR was made for you with Junie, the coding agent by JetBrains **Early Access Preview**

            It's still learning, developing, and might make mistakes. Please make sure you review the changes before you accept them.
            We'd love your feedback — join our Discord to share bugs, ideas: [here](https://jb.gg/junie/github).

            - 🔗 **Issue:** Fixes: #${{ steps.workflow-params.outputs.issue_id }}
            - ⚙️ **Trigger:** ${{ steps.workflow-params.outputs.trigger }}           

            ### 📊 Junie Summary
            ${{ steps.junie_summary.outputs.summary }}
          branch: ${{ steps.workflow-params.outputs.target_ref }}
          base: ${{ steps.workflow-params.outputs.checkout_ref }}

      - uses: EndBug/add-and-commit@v9
        name: Commit changes to the same branch
        if: steps.workflow-params.outputs.target_ref == steps.workflow-params.outputs.checkout_ref
        with:
          author_name: junie-eap[bot]
          author_email: junie-eap[bot]@users.noreply.github.com
          message: |
            [issue-${{ steps.workflow-params.outputs.issue_id }}] ${{ steps.junie_summary.outputs.name }}

            ${{ steps.junie_summary.outputs.summary }}
