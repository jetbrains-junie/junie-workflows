name: junie

on:
  workflow_call:
    secrets:
      GCP_DOCKER_JUNIE_KEY:
        required: false
    inputs:
      fix_conflicts:
        description: "temporary params, not using in workflow"
        type: boolean
        required: false
      fix_checks:
        description: "temporary params, not using in workflow"
        type: boolean
        required: false
      skip_workflow_file_validation:
        description: "temporary params, not using in workflow"
        type: boolean
        required: false
      workflow_params:
        description: "JSON string containing all workflow parameters"
        type: string
        required: true
      runs-on:
        description: "Which runner use to run junie"
        type: string
        default: "ubuntu-latest"
        required: false

jobs:
  run-junie:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Extract workflow params
        id: workflow-params
        uses: actions/github-script@v7
        env:
          INPUT_PARAMS: ${{ inputs.workflow_params }}
        with:
          script: |
            const params = JSON.parse(core.getInput('params'));

            // Add workflow start time in milliseconds
            const workflowStartTime = Date.now();
            console.log('Workflow start time (ms):', workflowStartTime);

            // for now we always use this default params for idea and junie versions
            const defaultParams = {
              junie_ide_version: '251',
              junie_version: '175.1',
              junie_runner: 'https://github.com/jetbrains-junie/artifacts/releases/download/175.1/junie.sh'
            }
            const finalParams = { ...defaultParams, ...params, project_stack: 'jvm', workflow_start_time: workflowStartTime };

            Object.keys(finalParams).forEach((key) => {
                core.setOutput(key, finalParams[key]);
            });         

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.workflow-params.outputs.checkout_ref }}

      - name: Init git configuration
        run: |
          git config --global user.name 'junie-eap[bot]'
          git config --global user.email 'junie-eap[bot]@users.noreply.github.com'

      - name: Make all scripts in .devcontainer executable
        if: always() && (hashFiles('.devcontainer/devcontainer.json') != '')
        run: find .devcontainer -type f -name "*.sh" -exec chmod +x {} \;

      - name: Prepare container and run Junie
        id: run_junie_in_container
        if: always() && (hashFiles('.devcontainer/devcontainer.json') != '')
        uses: devcontainers/ci@v0.3
        timeout-minutes: 50
        env:
          EJ_IDE_NAME: ${{ steps.workflow-params.outputs.ide }}
          EJ_TASK_NAME: ${{ steps.workflow-params.outputs.issue_title }}
          EJ_TASK_TEXT: ${{ steps.workflow-params.outputs.issue_body }}
          EJ_AUTH_GITHUB_TOKEN: ${{ secrets.junie_runner_token }}
          MULTI_RUNS: true
        with:
          push: never
          env: |
            EJ_IDE_NAME
            EJ_TASK_NAME
            EJ_TASK_TEXT
            EJ_AUTH_GITHUB_TOKEN            
            MULTI_RUNS
          runCmd: |
            mkdir ./.junie-work
            echo "Junie working directory: $(realpath ./.junie-work)"
            
            export EJ_FOLDER_WORK=$(realpath "./.junie-work")
            export EJ_FOLDER_IDE_CACHES=$(realpath "./.junie-work")
            export EJ_FOLDER_IDE_CONFIG=$(realpath "./.junie-work")
            export EJ_FOLDER_AGENT_CACHES=$(realpath "./.junie-work")
            export EJ_PROJECT=$(realpath ".")
            
            cd .junie-work
            echo "Downloading ej-runner"
            wget -nv "${{ steps.workflow-params.outputs.junie_runner }}" -O junie.sh

            echo "Running ej-runner"
            
            # Calculate time limit: 60 minutes minus time passed since workflow start
            current_time=$(date +%s%N | cut -b1-13)  # Get current time in milliseconds
            time_passed=$((current_time - ${{ steps.workflow-params.outputs.workflow_start_time }}))
            export JUNIE_TIME_LIMIT=$((3300000 - time_passed))  # 3300000 = 55 minutes in milliseconds
            echo "Current time (ms): $current_time"
            echo "Time passed since workflow start (ms): $time_passed"
            echo "Time limit set to (ms): $JUNIE_TIME_LIMIT"
            
            export JUNIE_VERSION="${{ steps.workflow-params.outputs.junie_version }}"
            export JUNIE_IDE_VERSION="${{ steps.workflow-params.outputs.junie_ide_version }}"
            chmod +x ./junie.sh && ./junie.sh
      - name: Check if junie run failed
        if: failure() && (hashFiles('.devcontainer/devcontainer.json') != '')
        run: |
          mkdir -p .junie-upload/.matterhorn/out/
          echo "${{ steps.run_junie_in_container.outputs.runCmdOutput }}" >> .junie-upload/.matterhorn/out/containerError.md
      - name: Extracting .idea and ej-logs from container
        if: always() && (hashFiles('.devcontainer/devcontainer.json') != '')
        run: |
          WORKSPACE_FOLDER=$(devcontainer read-configuration --workspace-folder . | jq -r '.workspace.workspaceFolder // "/workspaces/stub"')
          echo "WORKSPACE=$WORKSPACE_FOLDER"

          CONTAINER_ID=$(docker container ls --filter "label=devcontainer.config_file" --quiet | head -n 1)
          echo "CONTAINER=$CONTAINER_ID"

          mkdir -p .junie-upload

          docker cp "$CONTAINER_ID":"$WORKSPACE_FOLDER/.junie-work/.matterhorn" .junie-upload/.matterhorn || echo "No .matterhorn"
          docker cp "$CONTAINER_ID":"$WORKSPACE_FOLDER/.junie-work/idea-logs/log/idea.log" .junie-upload/.matterhorn/idea.log || echo "No idea-logs"          
          sudo chown -R runner:runner ${{ github.workspace }} || true

      - name: Run Junie without container
        if: always() && (hashFiles('.devcontainer/devcontainer.json') == '')
        timeout-minutes: 50
        env:
          EJ_IDE_NAME: ${{ steps.workflow-params.outputs.ide }}
          EJ_TASK_NAME: ${{ steps.workflow-params.outputs.issue_title }}
          EJ_TASK_TEXT: ${{ steps.workflow-params.outputs.issue_body }}
          EJ_AUTH_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MULTI_RUNS: true
        run: |
          mkdir ./.junie-work
          echo "Junie working directory: $(realpath ./.junie-work)"
 
          export EJ_FOLDER_WORK=$(realpath "./.junie-work")
          export EJ_FOLDER_IDE_CACHES=$(realpath "./.junie-work")
          export EJ_FOLDER_IDE_CONFIG=$(realpath "./.junie-work")
          export EJ_FOLDER_AGENT_CACHES=$(realpath "./.junie-work")
          export EJ_PROJECT=$(realpath ".")

          cd .junie-work
          
          echo "Downloading ej-runner"
          sudo wget -nv "${{ steps.workflow-params.outputs.junie_runner }}" -O junie.sh

          echo "Running ej-runner"
          # Calculate time limit: 60 minutes minus time passed since workflow start
          current_time=$(date +%s%N | cut -b1-13)  # Get current time in milliseconds
          time_passed=$((current_time - ${{ steps.workflow-params.outputs.workflow_start_time }}))
          export JUNIE_TIME_LIMIT=$((3300000 - time_passed))  # 3300000 = 55 minutes in milliseconds
          echo "Current time (ms): $current_time"
          echo "Time passed since workflow start (ms): $time_passed"
          echo "Time limit set to (ms): $JUNIE_TIME_LIMIT"

          export JUNIE_VERSION="${{ steps.workflow-params.outputs.junie_version }}"
          export JUNIE_IDE_VERSION="${{ steps.workflow-params.outputs.junie_ide_version }}"

          sudo -E chmod +x ./junie.sh && ./junie.sh

      - name: Extracting .idea and ej-logs for non-container run
        if: always() && (hashFiles('.devcontainer/devcontainer.json') == '')
        run: |
          echo "Copying logs to target dir..."
          sudo chown -R runner:runner ./.junie-work
          sudo chown -R runner:runner ${{ github.workspace }} || true
          mkdir .junie-upload
          cp -r ./.junie-work/.matterhorn .junie-upload/.matterhorn
          cp -r ./.junie-work/idea-logs/log/idea.log .junie-upload/.matterhorn/idea.log

      - name: Save junie result summary
        id: junie_summary
        continue-on-error: true
        run: |
          summary=$(jq -r '.content.output' .junie-upload/.matterhorn/*issue_md.*swe_patch*)
          echo "summary is $summary"
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          name=$(jq -r '.content.title' .junie-upload/.matterhorn/*issue_md.*swe_patch*)
          echo "name is $name"
          name=${name:-"Improvement from Junie"}
          echo "name=$name" >> "$GITHUB_OUTPUT" 

      - name: Archive output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: output
          path: |
            .junie-upload/.matterhorn/out/
            !.junie-upload/.matterhorn/out/attachments/**/*
          retention-days: 7

      - name: Archive attachments
        if: always()
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: ignore
          name: attachments
          path: .junie-upload/.matterhorn/out/attachments
          retention-days: 7

      - name: Archive matterhorn directory
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: matterhorn-logs
          path: .junie-upload/.matterhorn
          include-hidden-files: 'true'
          retention-days: 3

      - name: Restore or remove .idea directory
        run: |
          sudo rm -rf .junie-work
          sudo rm -rf .junie-upload
          sudo rm -rf .output.txt
          sudo rm -rf solution.patch

          if git ls-tree -d HEAD .idea | grep "\.idea" >/dev/null 2>&1; then
            echo "Restoring tracked '.idea' directory"
            git checkout -- .idea
            git clean -f -d .idea            
          else
            echo "Removing untracked '.idea' directory"
            sudo rm -rf .idea
          fi

      # Uncomment when we support auto resolve conflicts
      # - name: Reset git changes from junie
      #   if: always()
      #   run: |
      #      git reset origin/${{ steps.workflow-params.outputs.checkout_ref }}

      - name: Make Pull Request for the changes
        if: steps.workflow-params.outputs.target_ref != steps.workflow-params.outputs.checkout_ref
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.workflow-params.outputs.pull_requests_creation_token }}
          commit-message: "${{ steps.junie_summary.outputs.name }} \n ${{ steps.junie_summary.outputs.summary }}"
          title: "[Junie]: ${{ steps.junie_summary.outputs.name }}"
          body: |
            ## 📌 Hey! This PR was made for you with Junie, the coding agent by JetBrains **Early Access Preview**

            It's still learning, developing, and might make mistakes. Please make sure you review the changes before you accept them.
            We’d love your feedback — join our Discord to share bugs, ideas: [here](https://jb.gg/junie/github).

            - 🔗 **Issue:** #${{ steps.workflow-params.outputs.issue_id }}
            - ⚙️ **Trigger:** ${{ steps.workflow-params.outputs.trigger }}
            - 🏷 **Title:** ${{ steps.workflow-params.outputs.issue_title }}            

            ### 📊 Junie Summary
            ${{ steps.junie_summary.outputs.summary }}
          branch: ${{ steps.workflow-params.outputs.target_ref }}
          base: ${{ steps.workflow-params.outputs.checkout_ref }}

      - uses: EndBug/add-and-commit@v9
        name: Commit changes to the same branch
        if: steps.workflow-params.outputs.target_ref == steps.workflow-params.outputs.checkout_ref
        with:
          author_name: junie-eap[bot]
          author_email: junie-eap[bot]@users.noreply.github.com
          message: |
            [issue-${{ steps.workflow-params.outputs.issue_id }}] ${{ steps.junie_summary.outputs.name }}

            ${{ steps.junie_summary.outputs.summary }}
